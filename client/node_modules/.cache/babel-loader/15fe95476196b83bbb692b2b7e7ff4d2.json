{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SIGN_IN, AUTH_SIGN_UP, AUTH_SIGN_OUT, AUTH_ERR } from './types';\n/* \nActionCreators -> create/return actions or ({}) or function ->  dispatched -> middlewares -> reducers\n*/\n\nexport const getSecret = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get('http://localhost:5000/users/secret');\n      dispatch({\n        type: DASHBOARD_GET_DATA,\n        payload: res.data.secret\n      });\n    } catch (error) {}\n  };\n};\nexport const oauthFacebook = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/facebook/oauth', {\n      access_token: data\n    });\n    dispatch({\n      type: AUTH_SIGN_UP,\n      payload: res.data.token\n    });\n    localStorage.setItem('JWT_TOKEN', res.data.token);\n  };\n};\nexport const oauthGoogle = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/google/oauth', {\n      access_token: data\n    });\n    dispatch({\n      type: AUTH_SIGN_UP,\n      payload: res.data.token\n    });\n    localStorage.setItem('JWT_TOKEN', res.data.token);\n  };\n};\nexport const signIn = data => {\n  return async dispatch => {\n    /*  1 make HTTP requet to backend\n        2 take the backend response (jwt token)\n        3 dispatch user just signed in (with jwt token)\n        4 save the jwt token to locaStorage\n    */\n    try {\n      const res = await axios.post('http://localhost:5000/users/signin', data);\n      dispatch({\n        type: AUTH_SIGN_IN,\n        payload: res.data.token\n      });\n      localStorage.setItem('JWT_TOKEN', res.data.token);\n    } catch (error) {\n      dispatch({\n        type: AUTH_ERR,\n        payload: 'Email is already in use!'\n      });\n    }\n  };\n};\nexport const signUp = data => {\n  return async dispatch => {\n    /*  1 make HTTP requet to backend\n        2 take the backend response (jwt token)\n        3 dispatch user just signed up (with jwt token)\n        4 save the jwt token to locaStorage\n    */\n    try {\n      const res = await axios.post('http://localhost:5000/users/signup', data);\n      dispatch({\n        type: AUTH_SIGN_UP,\n        payload: res.data.token\n      });\n      localStorage.setItem('JWT_TOKEN', res.data.token);\n    } catch (error) {\n      dispatch({\n        type: AUTH_ERR,\n        payload: 'Email is already in use!'\n      });\n    }\n  };\n};\nexport const signOut = () => {\n  return dispatch => {\n    localStorage.removeItem('JWT_TOKEN');\n    dispatch({\n      type: AUTH_SIGN_OUT,\n      payload: ''\n    });\n  };\n};","map":{"version":3,"sources":["/media/ces-user/Localdisk/ReactJs/APIAuthentication/client/src/actions/index.js"],"names":["axios","AUTH_SIGN_IN","AUTH_SIGN_UP","AUTH_SIGN_OUT","AUTH_ERR","getSecret","dispatch","res","get","type","DASHBOARD_GET_DATA","payload","data","secret","error","oauthFacebook","post","access_token","token","localStorage","setItem","oauthGoogle","signIn","signUp","signOut","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { AUTH_SIGN_IN, AUTH_SIGN_UP, AUTH_SIGN_OUT, AUTH_ERR } from './types';\n/* \nActionCreators -> create/return actions or ({}) or function ->  dispatched -> middlewares -> reducers\n*/\nexport const getSecret = () => {\n    return async dispatch => {\n        try {\n            const res = await axios.get('http://localhost:5000/users/secret');\n\n            dispatch({\n                type: DASHBOARD_GET_DATA,\n                payload: res.data.secret\n            })\n        } catch (error) {\n            \n        }\n    }\n}\n\nexport const oauthFacebook = data => {\n    return async dispatch => {\n        const res = await axios.post('http://localhost:5000/users/facebook/oauth',\n            { access_token: data });\n\n        dispatch({\n            type: AUTH_SIGN_UP,\n            payload: res.data.token\n        });\n\n        localStorage.setItem('JWT_TOKEN', res.data.token);\n    }\n}\n\n\nexport const oauthGoogle = data => {\n    return async dispatch => {\n        const res = await axios.post('http://localhost:5000/users/google/oauth',\n            { access_token: data });\n\n        dispatch({\n            type: AUTH_SIGN_UP,\n            payload: res.data.token\n        });\n\n        localStorage.setItem('JWT_TOKEN', res.data.token);\n    }\n}\n\nexport const signIn = data => {\n    return async dispatch => {\n        /*  1 make HTTP requet to backend\n            2 take the backend response (jwt token)\n            3 dispatch user just signed in (with jwt token)\n            4 save the jwt token to locaStorage\n        */\n\n        try {\n            const res = await axios.post('http://localhost:5000/users/signin', data);\n\n            dispatch({\n                type: AUTH_SIGN_IN,\n                payload: res.data.token\n            });\n\n            localStorage.setItem('JWT_TOKEN', res.data.token);\n\n        } catch (error) {\n            dispatch({\n                type: AUTH_ERR,\n                payload: 'Email is already in use!'\n            });\n        }\n    }\n}\n\n\nexport const signUp = data => {\n    return async dispatch => {\n        /*  1 make HTTP requet to backend\n            2 take the backend response (jwt token)\n            3 dispatch user just signed up (with jwt token)\n            4 save the jwt token to locaStorage\n        */\n\n        try {\n            const res = await axios.post('http://localhost:5000/users/signup', data);\n\n            dispatch({\n                type: AUTH_SIGN_UP,\n                payload: res.data.token\n            });\n\n            localStorage.setItem('JWT_TOKEN', res.data.token);\n\n        } catch (error) {\n            dispatch({\n                type: AUTH_ERR,\n                payload: 'Email is already in use!'\n            });\n        }\n    }\n}\n\nexport const signOut = () => {\n    return dispatch => {\n        localStorage.removeItem('JWT_TOKEN');\n\n        dispatch({\n            type: AUTH_SIGN_OUT,\n            payload: ''\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}