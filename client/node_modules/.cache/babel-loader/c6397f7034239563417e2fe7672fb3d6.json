{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SIGN_UP, AUTH_ERR } from './types';\n/* \nActionCreators -> create/return actions or ({}) or function ->  dispatched -> middlewares -> reducers\n*/\n\nexport const oauthFacebook = data => {\n  return async dispatch => {\n    console.log('facebook recieved: ', data);\n    const res = await axios.post('http://localhost:5000/users/facebook/oauth', {\n      access_token: data\n    });\n    dispatch({\n      type: AUTH_SIGN_UP,\n      payload: res.data.token\n    });\n    localStorage.setItem('JWT_TOKEN', res.data.token);\n    console.log('res', res);\n  };\n};\nexport const oauthGoogle = data => {\n  return async dispatch => {\n    console.log('facebook recieved: ', data);\n    const res = await axios.post('http://localhost:5000/users/google/oauth', {\n      access_token: data\n    });\n    dispatch({\n      type: AUTH_SIGN_UP,\n      payload: res.data.token\n    });\n    localStorage.setItem('JWT_TOKEN', res.data.token);\n    console.log('res', res);\n  };\n};\nexport const signUp = data => {\n  return async dispatch => {\n    /*  1 make HTTP requet to backend\n        2 take the backend response (jwt token)\n        3 dispatch user just signed up (with jwt token)\n        4 save the jwt token to locaStorage\n    */\n    try {\n      const res = await axios.post('http://localhost:5000/users/signup', data);\n      dispatch({\n        type: AUTH_SIGN_UP,\n        payload: res.data.token\n      });\n      localStorage.setItem('JWT_TOKEN', res.data.token);\n    } catch (error) {\n      dispatch({\n        type: AUTH_ERR,\n        payload: 'Email is already in use!'\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/media/ces-user/Localdisk/ReactJs/APIAuthentication/client/src/actions/index.js"],"names":["axios","AUTH_SIGN_UP","AUTH_ERR","oauthFacebook","data","dispatch","console","log","res","post","access_token","type","payload","token","localStorage","setItem","oauthGoogle","signUp","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,SAAvC;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGC,IAAI,IAAI;AACjC,SAAO,MAAMC,QAAN,IAAkB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,IAAnC;AACA,UAAMI,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,4CAAX,EACd;AAAEC,MAAAA,YAAY,EAAEN;AAAhB,KADc,CAAlB;AAGAC,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,YADD;AAELW,MAAAA,OAAO,EAAEJ,GAAG,CAACJ,IAAJ,CAASS;AAFb,KAAD,CAAR;AAKAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCP,GAAG,CAACJ,IAAJ,CAASS,KAA3C;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,GAAnB;AACH,GAZD;AAaH,CAdM;AAiBP,OAAO,MAAMQ,WAAW,GAAGZ,IAAI,IAAI;AAC/B,SAAO,MAAMC,QAAN,IAAkB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,IAAnC;AACA,UAAMI,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,0CAAX,EACd;AAAEC,MAAAA,YAAY,EAAEN;AAAhB,KADc,CAAlB;AAGAC,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,YADD;AAELW,MAAAA,OAAO,EAAEJ,GAAG,CAACJ,IAAJ,CAASS;AAFb,KAAD,CAAR;AAKAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCP,GAAG,CAACJ,IAAJ,CAASS,KAA3C;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,GAAnB;AACH,GAZD;AAaH,CAdM;AAiBP,OAAO,MAAMS,MAAM,GAAGb,IAAI,IAAI;AAC1B,SAAO,MAAMC,QAAN,IAAkB;AACrB;AACR;AACA;AACA;AACA;AAEQ,QAAI;AACA,YAAMG,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,oCAAX,EAAiDL,IAAjD,CAAlB;AAEAC,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,YADD;AAELW,QAAAA,OAAO,EAAEJ,GAAG,CAACJ,IAAJ,CAASS;AAFb,OAAD,CAAR;AAKAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCP,GAAG,CAACJ,IAAJ,CAASS,KAA3C;AAEH,KAVD,CAUE,OAAOK,KAAP,EAAc;AACZb,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAET,QADD;AAELU,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIH;AACJ,GAvBD;AAwBH,CAzBM","sourcesContent":["import axios from 'axios';\n\nimport { AUTH_SIGN_UP, AUTH_ERR } from './types';\n/* \nActionCreators -> create/return actions or ({}) or function ->  dispatched -> middlewares -> reducers\n*/\n\nexport const oauthFacebook = data => {\n    return async dispatch => {\n        console.log('facebook recieved: ', data);\n        const res = await axios.post('http://localhost:5000/users/facebook/oauth',\n            { access_token: data });\n\n        dispatch({\n            type: AUTH_SIGN_UP,\n            payload: res.data.token\n        });\n\n        localStorage.setItem('JWT_TOKEN', res.data.token);\n        console.log('res', res);\n    }\n}\n\n\nexport const oauthGoogle = data => {\n    return async dispatch => {\n        console.log('facebook recieved: ', data);\n        const res = await axios.post('http://localhost:5000/users/google/oauth',\n            { access_token: data });\n\n        dispatch({\n            type: AUTH_SIGN_UP,\n            payload: res.data.token\n        });\n\n        localStorage.setItem('JWT_TOKEN', res.data.token);\n        console.log('res', res);\n    }\n}\n\n\nexport const signUp = data => {\n    return async dispatch => {\n        /*  1 make HTTP requet to backend\n            2 take the backend response (jwt token)\n            3 dispatch user just signed up (with jwt token)\n            4 save the jwt token to locaStorage\n        */\n\n        try {\n            const res = await axios.post('http://localhost:5000/users/signup', data);\n\n            dispatch({\n                type: AUTH_SIGN_UP,\n                payload: res.data.token\n            });\n\n            localStorage.setItem('JWT_TOKEN', res.data.token);\n\n        } catch (error) {\n            dispatch({\n                type: AUTH_ERR,\n                payload: 'Email is already in use!'\n            });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}